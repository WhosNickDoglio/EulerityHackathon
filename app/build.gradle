apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdk
    defaultConfig {
        applicationId "com.nicholasdoglio.eulerityhackathon"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //Android
    implementation "com.android.support:appcompat-v7:$rootProject.support"
    implementation "com.android.support:recyclerview-v7:$rootProject.support"
    implementation "com.android.support:design:$rootProject.support"
    implementation "com.android.support:support-v4:$rootProject.support"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraint"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroid"

    //Dagger
    implementation "com.google.dagger:dagger:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    //Glide
    implementation "jp.wasabeef:glide-transformations:$rootProject.transformations"
    implementation "jp.co.cyberagent.android.gpuimage:gpuimage-library:$rootProject.gpuimage"
    implementation "com.github.bumptech.glide:glide:$rootProject.glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glide"

    //Butterknife
    implementation "com.jakewharton:butterknife:$rootProject.butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknife"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofit"

    //EasyPermission
    implementation "pub.devrel:easypermissions:$rootProject.permission"

    //Debugging
    implementation "com.jakewharton.timber:timber:$rootProject.timber"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.canary"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.canary"

    //Testing
    testImplementation "junit:junit:$rootProject.junit"
    testImplementation "org.robolectric:robolectric:$rootProject.robo"
    androidTestImplementation "com.android.support.test:rules:$rootProject.espressoTest"
    androidTestImplementation "com.android.support.test:runner:$rootProject.espressoTest"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espresso"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$rootProject.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
